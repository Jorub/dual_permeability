!> stiffness matrix procedure for non-linear problems linearized by Picard method
module stiffmat
  public :: build_stiff_np
  contains

     !> build local stifness matrix for nonlinear problems and Picard method
     subroutine build_stiff_np(el_id)
      use typy
      use globals
      use global_objs
      use pde_objs
      use feminittools
      use linAlg
      use debug_tools

      integer(kind=ikind), intent(in) :: el_id

      
      integer(kind=ikind), dimension(:,:), allocatable, save :: layer
      !> sum of dispersive terms
      real(kind=rkind), dimension(1,1) :: dsum
      !> sum of convection terms
      real(kind=rkind) :: csum, tmp
      !> sum of reaction terms
      real(kind=rkind) :: rsum
      integer(kind=ikind) :: i,j,l, top, iproc, jproc, ii, jj, limits
      real(kind=rkind), dimension(1,3) :: u
      real(kind=rkind), dimension(3,1) :: v
      real(kind=rkind), dimension(1,3) :: w
      real(kind=rkind), dimension(3) :: conv
      real(kind=rkind), dimension(3,3) :: disp, disp2
      type(integpnt_str) :: quadpnt

      stiff_mat = 0

      if (.not. allocated(layer)) then
        allocate(layer(ubound(pde,1), ubound(pde,1)))
      end if

      do iproc=1,ubound(pde,1)
        do jproc=1,ubound(pde,1)
            layer(iproc, jproc) = elements%material(el_id, jproc)
        end do
      end do

      top = drutes_config%dimen
  
      quadpnt%element = el_id
 
      do iproc=1,ubound(pde,1)
	do jproc=1, ubound(pde,1)
	  do i=1, ubound(stiff_mat,1) 
	    do j=1, ubound(stiff_mat,1)
	      dsum = 0
	      csum = 0
	      rsum = 0

	      v(1:top,1) = elements%ders(el_id,i,1:top)
	      u(1,1:top) = elements%ders(el_id,j,1:top)

	      tmp = 0
	      do l=1, ubound(gauss_points%weight,1)
		quadpnt%order = l
! 		call pde(iproc)%pde_fnc(jproc)%dispersion(pde(iproc), layer(iproc, jproc), &
! 		                      quadpnt, tensor=disp(1:top,1:top))
		call pde(iproc)%pde_fnc(jproc)%dispersion(pde(iproc), layer(iproc, jproc), &
		x=integnode_now(l,jproc), tensor=disp2(1:top,1:top))
		w(:,1:top) =  matmul(u(:,1:top),disp(1:top,1:top))
		dsum = dsum - matmul(w(:,1:top) ,v(1:top,:))*gauss_points%weight(l)
	      end do



	      do l=1, ubound(gauss_points%weight,1)
	      	  quadpnt%order = l
! 		  call pde(iproc)%pde_fnc(jproc)%convection(pde(iproc), layer(iproc, jproc), quadpnt, &
! 		  vector_out=conv(1:top))  
		  call pde(iproc)%pde_fnc(jproc)%convection(pde(iproc), layer(iproc, jproc), x=integnode_now(l,jproc), &
		  vector_out=conv(1:top))
		  csum = csum - dot_product(u(1,1:top),conv(1:top))*base_fnc(i,l)*gauss_points%weight(l)
! 		  call pde(iproc)%pde_fnc(jproc)%der_convect(pde(iproc), layer(iproc, jproc), quadpnt, vector_out=conv(1:top))
		  call pde(iproc)%pde_fnc(jproc)%der_convect(pde(iproc), layer(iproc, jproc), x=integnode_now(l,jproc), vector_out=conv(1:top))
		  w = base_fnc(i,l)*base_fnc(j,l)
		  csum = csum - dot_product(w(1,1:top), conv(1:top))*gauss_points%weight(l)
	      end do
    
    !**!
!               !initially the proble was assumed to be symetric, this prerequisite must be checked here
!               if (abs(csum/dsum(1,1)) > 10*epsilon(csum)) then
!                 spmatrix%normeq = .true.
!               end if


	      do l=1, ubound(gauss_points%weight,1)
	         quadpnt%order = l
! 	         rsum = rsum + pde(iproc)%pde_fnc(jproc)%reaction(pde(iproc),layer(iproc, jproc), quadpnt)*base_fnc(i,l)*&
! 		    base_fnc(j,l)*gauss_points%weight(l)
		  rsum = rsum + pde(iproc)%pde_fnc(jproc)%reaction(pde(iproc),layer(iproc, jproc), x=integnode_now(l,jproc))*base_fnc(i,l)*&
		    base_fnc(j,l)*gauss_points%weight(l)
	      end do
	      

	      ii = i + limits*(iproc-1)
	      jj = j + limits*(jproc-1)
	      stiff_mat(ii,jj) = (dsum(1,1) + csum + rsum)

	    end do
	  end do
	end do
      end do

      stiff_mat = stiff_mat/gauss_points%area*elements%areas(el_id)*time_step

    end subroutine build_stiff_np


end module stiffmat