#---------------------------------------------D R U t E S v. 0.1b-----------------------------------------
# (Dual Richards' Unsaturated Equation Solver)
#
#---------------------------------------g l o b a l . c o n f ---------------------------------------------
#
###------- begin model type -------#####
# available options
# RE_std = standard Richards equation, primary solution is capillary pressure head h, matrix is nonsymmetric
#
# RE_rot = Richards equation in cylindric coordinates, primary solution is capillary pressure head h, matrix is nonsymmetric
#
# REstdH = Richards equation, primary solution is total hydraulic head H, matrix is symmetric
#
# RErotH = Richards equation in cylindric coordinates, primary solution is total hydraulic head H, matrix is symmetric", &
#
# boussi = Boussinesq equation for sloping land (1877) ,
#
# ADEstd = advection dispersion reaction equation (transport of solutes), convection is specified in config files, ,
# equilibrium sorption ,
#
# ADEstd_kinsorb = advection dispersion reaction equation (transport of solutes), ,
# convection is specified in config files, ,
# kinetic sorption ,
#
# ADE_RE_std = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in pressure head form, equilibrium sorption ,
#
# ADE_REstdH = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in total hydraulic head form, equilibrium sorption ,
#
# ADE_RE_rot = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in pressure hydraulic head form, cylindric coordinates (axisymmetric flow), equilibrium sorption ,
#
# ADE_RErotH = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in total hydraulic head form, cylindric coordinates (axisymmetric flow), equilibrium sorption ,
# ADE_RE_std_kinsorb = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in pressure head form, kinetic sorption ,
#
# ADE_REstdH_kinsorb = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in total hydraulic head form, kinetic sorption ,
#
# ADE_RE_rot_kinsorb = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in pressure hydraulic head form, cylindric coordinates (axisymmetric flow), kinetic sorption ,
#
# ADE_RErotH_kinsorb = advection dispersion reaction equation (transport of solutes), convection is computed from ,
# the Richards equation in total hydraulic head form, cylindric coordinates (axisymmetric flow), kinetic sorption ,
#
# Re_dual_totH = Richards equation dual porosity with total hydraulic head (added J 13/6/16)

# heat - heat conduction equation (Sophoclea, 1979)

Re_dual_totH
#RE_std 

###------- end model type -------#####

#problem dimension (1D, 2D, 3D) [integer]
#1 = 1D
#2 = 2D
#3 = 3D
# recently only 1D and 2D is implemented
2


# define mesh generator
# 1 - internal mesh generator
# 2 - t3d mesh generator
# 3 - gmsh mesh generator
3


# maximum number of iteration of the Picard method [integer]
30
# iteration criterion for the Picard method
10e10


#integration method - degree of Gauss quadrature formulae
#10 - 1 point formula,
#20 - 2 point formula
#30 - 3 point formula
#40 - 4 point formula
#50 - 5 point formula
#60 - 6 point formula
#70 - 7 point formula
#90 - 9 point formula (in 2-dimensions derived from 3 point formula, ask Michal Kuraz :) )
#120 - 12 point formula
30

#####-----begin time information------#####

#time units (write what ever you like, will be displayed on your plots) (up to 5 characters)

hours

#-----initial dt hod - init dt [real]
1e-5
#
#-----end time [real]
1.45
#
#---minimal time step [real]
1e-6
#
#
#-- maximal time step [real]
0.05
##
#####-----end time information ------


######------begin terminal output print settings --------
#print level [integer]
# 0 = standard output
# 1 = screen goes to out/screen.log
# -1 = screen goes to /dev/null, not suitable for windows
0


#######-----end terminal output print settings ------######


######------begin observation time settings------######
# observation time method
# 1 - adjust time step to observation times
# 2 - interpolate solution between the time steps (recommended)
2

# set format of the observation files (takes effect in 2D only)
# scil -- for scilab files
# pure -- raw data - just nodes IDs and FEM coefficients
# gmsh -- gmsh postprocessing
scil

##make sequence of observation time [y/n]
n

##if [y] then define number of frames, if [n] comment it out
# 1000
#number of observation times
0
#observation time values [real]


####-----end observation time settings------########
#observation points
#number of observation points [integer]
#
18
#observation points coordinates
 12.5 -8.875
 12.5 -11.125
 11.53 -10.5625
 11.53 -9.4375
 13.47 -10.5625
 13.47 -9.4375
 37.5 -18.875
 37.5 -21.125
 36.53 -20.5625
 36.53 -19.4375
 38.47 -20.5625
 38.47 -19.4375
 62.5 -28.875
 62.5 -31.125
 61.53 -30.5625
 61.53 -29.4375
 63.47 -30.5625
 63.47 -29.4375
 
#observation points coordinates
# 7.5
# 11.5
#define points with measured data
0
# point coordinates
#


#nonlinear iteration method
#0 - standard Picard method
#1 - Schwarz-Picard method (dd-adaptivity)
#2 - subcycling
0

#time integration method
# 0 - steady state problem
# 1 - unsteady problem with lumped (diagonal) capacity matrix (recommended)
# 2 - unsteady problem with consistent capacity matrix
2

#run from backup
n
# "drutes.conf/matsrv/RE_matrix_press_head-100.sci"
#/home/miguel/skola/infiltr/drutemp/out/RE_matrix_press_head-1.sci
# debugging [y/n]
n
